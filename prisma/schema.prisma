generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  name             String?
  password         String?
  google_id        String?           @unique
  avatar           String?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  quotes           Quote[]
  loan_connections Loan_Connection[]
}

model Quote {
  id                       Int                   @id @default(autoincrement())
  created_at               DateTime              @default(now())
  updated_at               DateTime              @updatedAt
  user_id                  Int
  address                  String?
  loan_type                LoanType?
  property_type            String?
  is_living_in_property    Boolean               @default(true)
  status                   QuoteStatus?          @default(draft)
  is_term_sheets_available Boolean?              @default(false)
  user                     User                  @relation(fields: [user_id], references: [id])
  quoteApplicantInfo       Quote_Applicant_Info? @relation("QuoteToApplicantInfo")
  quoteLoanDetails         Quote_Loan_Details?   @relation("QuoteToLoanDetails")
  quotePriorities          Quote_Priorities?     @relation("QuoteToPriorities")
  quoteRentalInfo          Quote_Rental_Info?    @relation("QuoteToRentalInfo")
  is_draft                 Boolean?              @default(true)
  active_step              FormSteps?            @default(property_address)
  loan_connections         Loan_Connection[]
  universal_term_sheets    UniversalTermSheet[]
}

model Quote_Applicant_Info {
  id                     Int      @id @default(autoincrement())
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  quote_id               Int      @unique
  full_name              String?
  citizenship            String?
  company_name           String?
  company_ein            String?
  liquid_funds_available String?
  properties_owned       Int?
  total_equity_value     String?
  total_debt_value       String?
  credit_score           Int?
  phone_number           String?
  whats_most_important   String?
  company_state          String?
  property_state         String?
  quote                  Quote    @relation("QuoteToApplicantInfo", fields: [quote_id], references: [id])
}

model Quote_Loan_Details {
  id                              Int       @id @default(autoincrement())
  created_at                      DateTime  @default(now())
  updated_at                      DateTime  @updatedAt
  quote_id                        Int       @unique
  purpose_of_loan                 String?
  purchase_price                  String?
  contract_close_date             DateTime?
  required_close_date             DateTime?
  has_rehab_funds_requested       Boolean?
  after_repair_property_value     String?
  exit_plan                       ExitPlan?
  completed_fix_and_flips_2_years String?
  as_is_property_value            String?
  seller_concessions              Int?
  assignment_fees                 Int?
  has_tenant                      Boolean?
  funding_reason                  String?
  properties_owned                String?
  property_purchase_date          DateTime?
  mortgage_remaining              String?
  current_property_value          String?
  requested_loan_amount           String?
  has_paid_rent_last_3_months     Boolean?
  has_signed_lease                Boolean?
  how_much_are_they_paying        String?
  market_rent                     String?
  what_needs_to_be_done           String?
  how_will_you_fund_this          String?
  rehab_amount_requested          String?
  quote                           Quote     @relation("QuoteToLoanDetails", fields: [quote_id], references: [id])
}

model Quote_Rental_Info {
  id                        Int      @id @default(autoincrement())
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
  loan_amount               String?
  monthly_rental_income     String?
  annual_property_insurance String?
  annual_property_taxes     String?
  monthly_hoa_fee           String?
  quote_id                  Int      @unique
  quote                     Quote    @relation("QuoteToRentalInfo", fields: [quote_id], references: [id])
}

model Quote_Priorities {
  id               Int      @id @default(autoincrement())
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  quote_id         Int      @unique
  speed_of_closing Boolean?
  low_fees         Boolean?
  high_leverage    Boolean?
  comments         String?
  quote            Quote    @relation("QuoteToPriorities", fields: [quote_id], references: [id])
}

model Employee {
  id               Int               @id @default(autoincrement())
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  name             String
  email            String            @unique
  password         String?
  role             Role
  is_active        Boolean           @default(false)
  invite_status    EmployeeStatus    @default(pending)
  loan_connections Loan_Connection[]
}

model Lender {
  id                    Int                  @id @default(autoincrement())
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  name                  String
  email                 String               @unique
  password              String?
  is_active             Boolean              @default(false)
  invite_status         EmployeeStatus       @default(pending)
  contact_email         String?
  phone                 String?
  website               String?
  status                LenderStatus         @default(inactive)
  loan_connections      Loan_Connection[]
  loan_products         LoanProduct[]
  universal_term_sheets UniversalTermSheet[]
}

model LoanProduct {
  id                    Int                  @id @default(autoincrement())
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  lender_id             Int
  name                  String
  description           String?
  lender                Lender               @relation(fields: [lender_id], references: [id])
  criteria              LoanCriteria?        @relation("LoanProductToCriteria")
  loan_connections      Loan_Connection[]
  universal_term_sheets UniversalTermSheet[]
  active                Boolean              @default(true)
}

model LoanCriteria {
  id                      Int                     @id @default(autoincrement())
  created_at              DateTime                @default(now())
  updated_at              DateTime                @updatedAt
  loan_product_id         Int                     @unique
  max_loan_amount         Decimal?
  min_loan_amount         Decimal?
  citizenship_requirement CitizenshipRequirement?
  seasoning_period_months Int?
  appraisal_required      Boolean?
  appraisal_type          AppraisalType?
  states_funded           Json?
  loan_product            LoanProduct             @relation("LoanProductToCriteria", fields: [loan_product_id], references: [id])
}

model Loan_Connection {
  id                    Int                       @id @default(autoincrement())
  created_at            DateTime                  @default(now())
  updated_at            DateTime                  @updatedAt
  lender_id             Int
  lender                Lender                    @relation(fields: [lender_id], references: [id])
  employee_id           Int
  employee              Employee                  @relation(fields: [employee_id], references: [id])
  loan_product_id       Int?
  loan_product          LoanProduct?              @relation(fields: [loan_product_id], references: [id])
  user_id               Int
  user                  User                      @relation(fields: [user_id], references: [id])
  quote_id              Int
  quote                 Quote                     @relation(fields: [quote_id], references: [id])
  term_sheet_status     TermSheetStatus?          @default(awaiting)
  universal_term_sheets UniversalTermSheet[]
  closedLog             LoanConnectionClosedLog?  @relation("LoanConnectionToClosedLog")
}

model LoanConnectionClosedLog {
  id                 Int             @id @default(autoincrement())
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  loan_connection_id Int             @unique
  loan_connection    Loan_Connection @relation("LoanConnectionToClosedLog", fields: [loan_connection_id], references: [id])
  closed_by          String?
  closed_reason      String?
}

model UniversalTermSheet {
  id                 Int  @id @default(autoincrement())
  quote_id           Int
  lender_id          Int
  loan_product_id    Int?
  loan_connection_id Int?

  loan_amount       Decimal?
  interest_rate     Float?
  term_months       Int?
  origination_fee   Decimal?
  appraisal_fees    Decimal?
  total_lender_fees Decimal?
  dscr              Float?
  arv_estimate      Decimal?
  exit_strategy     String?
  status            String?

  quote           Quote            @relation(fields: [quote_id], references: [id])
  lender          Lender           @relation(fields: [lender_id], references: [id])
  loan_product    LoanProduct?     @relation(fields: [loan_product_id], references: [id])
  loan_connection Loan_Connection? @relation(fields: [loan_connection_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Role {
  admin
  employee
}

enum EmployeeStatus {
  pending
  active
  expired
  cancelled
}

enum LoanType {
  bridge_fix_and_flip
  dscr_rental
}

enum ExitPlan {
  refinance
  sell
}

enum FormSteps {
  property_address
  occupancy
  disqualified
  sign_in
  loan_type
  applicant_info
  loan_details
  priorities
  rental_info
}

enum QuoteStatus {
  draft
  awaiting
  signed
  closed
  available
}

enum TermSheetStatus {
  awaiting
  pending
  signed
  closed
  available
}

enum LenderStatus {
  active
  inactive
}

enum CitizenshipRequirement {
  US_CITIZEN
  PERMANENT_RESIDENT
  LEGAL_RESIDENT
  FOREIGN_NATIONAL
  ANY
}

enum AppraisalType {
  FULL // Full interior + exterior appraisal
  DRIVE_BY // Exterior-only "drive-by" appraisal
  DESKTOP // Desktop appraisal (remote, online data only)
  BPO // Broker Price Opinion
  AVM // Automated Valuation Model
  NONE // No appraisal required
}
